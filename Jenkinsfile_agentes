pipeline {
    agent none

    environment {
        PYTHONPATH = '.'
    }

    stages {
        stage('Get Code') {
            agent { label 'LinuxA' }
            steps {
                git 'https://github.com/x4ntp0d/helloworld.git'
                sh 'whoami && hostname && pwd'
                echo "Workspace: ${env.WORKSPACE}"
            }
        }

        stage('Unit Tests + Coverage + JUnit') {
            agent { label 'LinuxA' }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        pytest --junitxml=result-unit.xml --cov=app --cov-branch --cov-report=xml test/unit/
                    '''
                }
                junit 'result-unit.xml'
                recordCoverage tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']], qualityGates: [
                    [threshold: 96.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'NOTE'],
                    [threshold: 85.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'ERROR'],
                    [threshold: 90.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'NOTE'],
                    [threshold: 80.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'ERROR']
                ]
            }
        }

        stage('Static Analysis (Flake8)') {
            agent { label 'LinuxB' }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh 'whoami && hostname && pwd'
                    sh 'flake8 app --format=pylint > flake8.out || true'
                    recordIssues tools: [flake8(pattern: 'flake8.out')],
                        qualityGates: [
                            [threshold: 10, type: 'TOTAL', unstable: false],
                            [threshold: 8, type: 'TOTAL', unstable: true]
                        ]
                }
            }
        }

        stage('Security Analysis (Bandit)') {
            agent { label 'LinuxB' }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh 'whoami && hostname && pwd'
                    sh 'bandit -r app -f xml -o bandit.xml || true'
                    recordIssues tools: [bandit(pattern: 'bandit.xml')],
                        qualityGates: [
                            [threshold: 4, type: 'TOTAL', unstable: false],
                            [threshold: 2, type: 'TOTAL', unstable: true]
                        ]
                }
            }
        }

        stage('Performance Test (JMeter)') {
            agent { label 'LinuxB' }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        whoami && hostname && pwd
                        python3 app/main.py &
                        FLASK_PID=$!
                        sleep 5
                        jmeter -n -t test/jmeter/flask.jmx -l result.jtl
                        kill $FLASK_PID
                    '''
                    perfReport sourceDataFiles: 'result.jtl'
                }
            }
        }
    }
}
